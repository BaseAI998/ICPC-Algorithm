const int N = 1e6+7;
int n,tot;
int d[N];
#define fa(x) (x>>1)
#define ls(x) (x<<1)
#define rs(s) (x<<1|1)
void Up(int x) {
	if(x == 1) return ;	//考虑根结点 
	if(d[x] < d[fa(x)]) {
		swap(d[x], d[fa(x)]); Up(fa(x));
	}
}
void Down(int x) {
	if(ls(x) > tot) return ;	//考虑叶子结点 
	int y = ls(x);
	if(rs(x)<=tot && d[rs(x)]<d[ls(x)]) y = rs(x);	//考虑右儿子不存在
	//旋转之后要严格满足之前性质，就只能和最小的儿子交换 
	if(d[y] < d[x]) {
		swap(d[x], d[y]); Down(y);
	}
}
int main()
{
	n = read();
	while(n--) {
		int op = read();
		if(op == 1) {
			int x = read();
			d[++tot] = x;
			Up(tot);
		} else if(op == 2) {
			printf("%d\n",d[1]);
		} else {
			//Trick：不直接删除堆顶，而是将堆顶堆尾互换，再删堆尾 
			swap(d[1], d[tot]);
			--tot;
			Down(1);
		}
	}
	return 0;
}
