// Dinic
// 在普通图上的时间复杂度是 O(V^2*E)，在单位容量图上的时间复杂度是 O(sqrt(V)*E)
const int N = 1e5+7;
const int M = 1e5+7;    //注意边数和点数不同
const int INF = 1e9;
class Flow {
private :
    struct Edge {
        int next, to, cap, flow;
    } edge[M<<1];
    int head[N], cnt = 0;
public :
    int n, S, T;
    long long maxflow = 0;
    int dep[N], cur[N];

    void Init() {    //要在addEdge之前Init head
        memset(head, -1, sizeof(int)*(n+1));
        cnt = 0;
    }
    void AddEdge(int u,int v,int w) {
        edge[cnt] = {head[u], v, w, 0};
        head[u] = cnt++;
        edge[cnt] = {head[v], u, 0, 0};
        head[v] = cnt++;
    }
    bool bfs() {
        queue<int> q;
        memset(dep, 0, sizeof(int)*(n+1));

        dep[S] = 1;
        q.push(S);
        while(!q.empty()) {
            int u = q.front();
            q.pop();
            for(int i=head[u]; ~i; i=edge[i].next) {
                int v = edge[i].to;
                if((!dep[v]) && (edge[i].cap > edge[i].flow)) {
                    dep[v] = dep[u] + 1;
                    q.push(v);
                }
            }
        }
        return dep[T];
    }
    int dfs(int u,int flow) {
        if((u==T) || (!flow)) return flow;

        int ret = 0;
        for(int& i=cur[u]; ~i; i=edge[i].next) {
            int v = edge[i].to, d;
            if((dep[v] == dep[u]+1) && 
               (d = dfs(v, min(flow-ret, edge[i].cap-edge[i].flow)))) {
                ret += d;
                edge[i].flow += d;
                edge[i^1].flow -= d;
                if(ret == flow) return ret;
            }
        }
        return ret;
    }
    void Dinic() {
        while(bfs()) {
            memcpy(cur, head, sizeof(int)*(n+1));
            maxflow += dfs(S, INF);
        }
    }
};
