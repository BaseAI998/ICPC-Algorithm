struct SegmentTree {
	int sum[N<<2], tag[N<<2];
	#define ls(p) p<<1
	#define rs(p) p<<1|1
	void push_up(int p) {
		sum[p] = sum[ls(p)] + sum[rs(p)];
	}
	void build(int p,int l,int r) {
		if(l == r) {
			sum[p] = a[l];
			return ;
		}
		int mid = (l + r) >> 1;
		build(ls(p), l, mid);
		build(rs(p), mid+1, r);
		push_up(p);
	}
	void fl(int p,int l,int r,int k) {
		tag[p] += k;
		sum[p] += (r-l+1)*k;
	}
	void push_down(int p,int l,int r) {
		int mid = (l + r) >> 1;
		fl(ls(p), l, mid, tag[p]);
		fl(rs(p), mid+1, r, tag[p]);
		tag[p] = 0;
	}
	void Modify(int p,int l,int r,int nl,int nr,int k) {
		if(nl<=l && r<=nr) {
			tag[p] += k;
			sum[p] += (r-l+1)*k;
			return ;
		}
		push_down(p, l, r);
		int mid = (l + r) >> 1;
		if(nl <= mid) Modify(ls(p), l, mid, nl, nr, k);
		if(nr > mid) Modify(rs(p), mid+1, r, nl, nr, k);
		push_up(p);
	}
	int Query(int p,int l,int r,int ql,int qr) {
		if(ql<=l && r<=qr) {
			return sum[p];
		}
		push_down(p, l, r);
		int mid = (l + r) >> 1, res = 0;
		if(ql <= mid) res += Query(ls(p), l, mid, ql, qr);
		if(qr > mid) res += Query(rs(p), mid+1, r, ql, qr);
		return res;
	}
}T;
