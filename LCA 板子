int dep[N],lg[N];
int fa[N][20];
void Initlg() {
	for(int i=2;i<=n;++i) {
		lg[i] = lg[i>>1] + 1;
	}
}
void Dfs(int u,int fath) {
	dep[u] = dep[fath] + 1;
	fa[u][0] = fath;
	for(int i=1;i<=lg[dep[u]-1];++i) {
		fa[u][i] = fa[fa[u][i-1]][i-1];
	}
	for(int i=head[u];i;i=edge[i].next) {
		int v = edge[i].to;
		if(v == fath) continue;
		Dfs(v, u);
	}
}
int LCA(int x,int y) {
	if(dep[x] < dep[y]) swap(x, y);
	while(dep[x] > dep[y]) {
		x = fa[x][lg[dep[x]-dep[y]]];
	}
	if(x == y) return x;
	for(int i=lg[dep[x]-1];i>=0;--i) {
		if(fa[x][i] != fa[y][i]) {
			x = fa[x][i];
			y = fa[y][i];
		}
	}
	return fa[x][0];
}
