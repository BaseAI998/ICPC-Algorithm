const double eps = 1e-8;
struct Point {
    double x,y;
    Point(double _x=0,double _y=0) {
        x = _x, y = _y;
    }
    void in() {
        x = read(), y = read();
    }
    Point operator + (const Point &el) const {
        return (Point){x+el.x, y+el.y};
    }
    Point operator - (const Point &el) const {
        return (Point){x-el.x, y-el.y};
    }
    double operator ^ (const Point &el) const {    //注意检查叉乘和点乘是否会爆 int/ ll
        return x*el.y - y*el.x;
    }   
    double operator * (const Point &el) const {    //
        return x*el.x + y*el.y;
    }
    Point operator * (double k) const {
        return (Point){x*k, y*k};
    }
    double len2() {
        return (*this) * (*this);
    }
    double len() {
        return sqrt(len2());
    }
    void Print() {
        printf("%.12lf %.12lf\n",x, y);
    }
};
Point mul(Point v,double k) {    //数乘，前面也有
    return (Point){v.x*k, v.y*k};
}
double S(Point A,Point B,Point C) {    //三角形ABC的面积
    return 0.5 * fabs(((B-A)^(C-A)));
}
int sign(double x) {
    if(fabs(x) < eps) return 0;
    return (x < 0) ? -1 : 1;
}
int dcmp(double x,double y) {
    return sign(x - y);
}

// 以下是俊杰的板子
const long long eps=0;
const double PI=3.1415926535897932384l;
 
template<typename T> struct point
{
    T x,y;
 
    bool operator==(const point &a) const {return (abs(x-a.x)<=eps && abs(y-a.y)<=eps);}
    point operator+(const point &a) const {return {x+a.x,y+a.y};}
    point operator-(const point &a) const {return {x-a.x,y-a.y};}
    point operator-() const {return {-x,-y};}
    point operator*(const T k) const {return {k*x,k*y};}
    point operator/(const T k) const {return {x/k,y/k};}
    T operator*(const point &a) const {return x*a.x+y*a.y;} //Dot
    T operator^(const point &a) const {return x*a.y-y*a.x;} //Cross
    bool operator<(const point &a) const {if (abs(x-a.x)<=eps) return y<a.y-eps; return x<a.x-eps;}
    bool is_par(const point &a) const {return abs((*this)^a)<=eps;}
    bool is_ver(const point &a) const {return abs((*this)*a)<=eps;}
    int toleft(const point &a) const {auto t=(*this)^a; return (t>eps)-(t<-eps);}
    T len2() const {return (*this)*(*this);}
    T dis2(const point &a) const {return (a-(*this)).len2();}
    double len() const {return sqrt(len2());}
    double dis(const point &a) const {return (a-(*this)).len();}
    double ang(const point &a) const {return acos(((*this)*a)/(this->len()*a.len()));}
    point rot(const double rad) const {return {x*cos(rad)-y*sin(rad),x*sin(rad)+y*cos(rad)};}
};
 
using Point=point<long long>;
