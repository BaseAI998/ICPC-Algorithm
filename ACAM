#include<bits/stdc++.h>
using namespace std;
inline int read() {
    int x = 0, f = 1; char ch = getchar();
    while(ch<'0' || ch>'9') { if(ch=='-') f=-1; ch=getchar(); }
    while(ch>='0'&&ch<='9') { x=(x<<3)+(x<<1)+(ch^48); ch=getchar(); }
    return x * f;
}
typedef long long LL;
const int N = 5e5+7;
int tot;
int cnt[N];
int ch[N][26];
vector<int> bl[N];
void insert(string s, int id) {
	int now = 0, len = s.length();
	for(int i=0;i<len;++i) {
		if(!ch[now][s[i]-'a']) ch[now][s[i]-'a'] = ++tot;
		now = ch[now][s[i]-'a'];
	}
	++cnt[now];
	bl[now].push_back(id);
}
int fail[N];
int trial[N][26];	//尝试图 
vector<int> E[N];
void Build() {
	queue<int> q;
	for(int i=0;i<26;++i) {
		int v = ch[0][i];
		if(v) {
			trial[0][i] = v;
			q.push(v);
		}
	}
	while(!q.empty()) {
		int u = q.front();
		q.pop();
		for(int i=0;i<26;++i) {
			int v = ch[u][i];
			if(ch[fail[u]][i]) fail[v] = ch[fail[u]][i];
			else fail[v] = trial[fail[u]][i];
			if(v) {
				trial[u][i] = v;
				q.push(v);
			} else {
				trial[u][i] = trial[fail[u]][i];
			}
		}
		E[fail[u]].push_back(u);
	}
}
LL vis[N];
void Dfs(int u) {
	for(auto v : E[u]) {
		Dfs(v);
		vis[u] += vis[v];
	}
}
int main()
{
	int n = read();
	for(int i=1;i<=n;++i) {
		string s;
		cin >> s;
		insert(s, i);
	}
	Build();
	string t;
	cin >> t;
	int now = 0, len = t.length();
	for(int i=0;i<len;++i) {
		now = trial[now][t[i]-'a'];
		++vis[now];
	}
	vector<int> ans(n+1);
	Dfs(0);
	for(int i=1;i<=tot;++i) {
		if(cnt[i]) {
			for(auto x : bl[i]) {
				ans[x] = vis[i];
			}
		}
	}
	for(int i=1;i<=n;++i) printf("%d\n",ans[i]);
	return 0;
}
